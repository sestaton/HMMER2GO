package HMMER2GO::Command::map2gaf;
# ABSTRACT: Generate association file for gene and GO term mappings.

use 5.010;
use strict; 
use warnings;
use HMMER2GO -command;
use POSIX               qw(strftime);
use IPC::System::Simple qw(system);
use HTTP::Tiny;
use File::Basename;
use Bio::DB::Taxonomy;
#use Data::Dump::Color;

our $VERSION = '0.18.2';

sub opt_spec {
    return (    
        [ "infile|i=s",  "Tab-delimited file containing gene -> GO term mappings (GO terms should be separated by commas)." ],
        [ "outfile|o=s", "File name for the association file."                                   ],
        [ "species|s=s", "The species name to be used in the association file."                  ],
	[ "gofile|g=s",  "GO.terms_alt_ids file containing the one letter code for each term."   ],
    );
}

sub validate_args {
    my ($self, $opt, $args) = @_;

    my $command = __FILE__;
    if ($self->app->global_options->{man}) {
	system([0..5], "perldoc $command");
    }
    else {
	$self->usage_error("Too few arguments.") 
	    unless $opt->{infile} && $opt->{outfile} && $opt->{species};
    }
} 

sub execute {
    my ($self, $opt, $args) = @_;

    exit(0) if $self->app->global_options->{man};
    my $infile  = $opt->{infile};
    my $outfile = $opt->{outfile};
    my $species = $opt->{species};
    my $gofile  = $opt->{gofile};

    my $result = _generate_go_association($infile, $outfile, $species, $gofile);
}

sub _generate_go_association {
    my ($infile, $outfile, $species, $gofile) = @_;

    $gofile = _get_term_file() if !$gofile;
    
    unless (-s $gofile) {
	say STDERR "\n[ERROR]: Could not fetch GO term file. Try manually: http://purl.obolibrary.org/obo/go.obo.\n";
	exit(1);
    }

    my ($goterms, $format, $version) = _parse_obo_to_terms($gofile);
    my $taxonid = _get_taxon_id($species);
    my $taxon   = defined $taxonid ? "taxon:$taxonid" : 'taxon:0';
    my $date    = strftime "%Y%m%d", localtime;

    open my $in, '<', $infile or die "\nERROR: Could not open file: $infile\n";
    open my $out, '>', $outfile or die "\nERROR: Could not open file: $outfile\n";

    # https://geneontology.github.io/docs/go-annotation-file-gaf-format-2.1/
    say $out '!gaf-version: 2.1';
    say $out "! File generated by HMMER2GO (v$VERSION): https://github.com/sestaton/HMMER2GO";
    say $out "! Date generated on: $date";
    say $out "! Generated from GO ontology format version: $format";
    say $out "! Generated from GO ontology data version: $version";
    say $out '!===========================================================================';
    
    my %namespace = ( 'biological_process' => 'P',
		      'cellular_component' => 'C',
		      'external' => 'E',
		      'molecular_function' => 'F' );

    my $pattern = qr/ 
	\[      # matching `[` sign
        \s*     # ... and, if any, whitespace after them
        ([^]]+) # starting from the first non-whitespace symbol, capture all the non-']' symbols
        ]
       /x;

    while (my $line = <$in>) {
	chomp $line;
	my @go_mappings = split /\t/, $line;
	#my $dbstring = 'db.'.$go_mappings[0];
	my @go_terms = split /\,/, $go_mappings[4];
	for my $term (@go_terms) {
	    if (exists $goterms->{$term}) {
		my $aspect = $namespace{ $goterms->{$term}{namespace} };
		my ($dbxrefs) = ($goterms->{$term}{def} =~ /$pattern/);
		my $xrefs = defined $dbxrefs ? join "|", split /\,\s+/, $dbxrefs : '';
		
	        say $out join "\t",
		    'Pfam',
		    $go_mappings[0],
		    $go_mappings[0],
		    '',
		    $term,
		    $xrefs,
		    'IEA',
		    '',
		    $aspect,
		    $goterms->{$term}{name},
		    '|',
		    'gene',
		    $taxon,
		    $date,
		    'Pfam',
		    '',
		    '';
	    }
	}
    }
    close $in;
    close $out;

    unlink $gofile;
}

sub _parse_obo_to_terms {
    my ($gofile) = @_;

    open my $fh, '<', $gofile or die "\n[ERROR]: Could not open file: $gofile\n";;
    local $/ = ""; 

    my ($format, $version);
    my %ids;
    while (my $line = <$fh>) {                                                                                                            
        chomp $line;
	if ($line =~ /format-version|data-version/) {	    
	    ($format) = ($line =~ /format-version: (\d+\.\d+)/);
	    ($version) = ($line =~ /data-version: releases\/(\d+\-?\d+\-?\d+)/); #2020-12-08
	}
	next if $line =~ /^format-version|^data-version|^subsetdef|^synonymtypedef|^default-namespace|^ontology|^property_value/;
        my ($header, $id, $name, $namespace, $def, $syn, @rels) = map { s/^\w+\: //; $_ } split /\n/, $line;

	# skip obsolete terms
	next if $def =~ /obsolete/i;
        $ids{$id}{name} = $name;
        $ids{$id}{def} = $def;
        $ids{$id}{namespace} = $namespace;
        $ids{$id}{synonym} = $syn;
        $ids{$id}{isa_a} = \@rels
    }
    close $fh;

    return (\%ids, $format, $version);
}
    
sub _get_term_file {
    my $urlbase = 'http://current.geneontology.org/ontology/go.obo';
    my $response = HTTP::Tiny->new->get($urlbase);

    unless ($response->{success}) {
        die "Can't get url $urlbase -- Status: ", $response->{status}, " -- Reason: ", $response->{reason};
    }

    my $gofile = 'go.obo';
    open my $out, '>', $gofile or die "\n[ERROR]: Could not open file: $gofile\n";
    say $out $response->{content};
    close $out;

    return $gofile;
}

sub _fetch_terms_file_curl {
    my ($outfile) = @_;

    my $host = 'http://current.geneontology.org';
    my $dir  = 'ontology';
    my $file = 'go.obo';
    my $endpoint = join "/", $host, $dir, $file;

    system([0..5], 'curl', '-u', 'anonymous:anonymous@foo.com', '-sL', '-o', $outfile, $endpoint) == 0
        or die "\n[ERROR]: 'wget' failed. Cannot fetch map file. Please report this error.";

    return $outfile;
}

sub _get_taxon_id {
    my ($species) = @_;

    my $db      = Bio::DB::Taxonomy->new(-source => 'entrez');
    my $taxonid = $db->get_taxonid($species);

    return $taxonid;
}


    1;
__END__

=pod

=head1 NAME 
                                                                       
 hmmer2go map2gaf - Create GO Annotation Format (GAF) file for statistical analysis

=head1 SYNOPSIS    

 hmmer2go map2gaf -i genes_orfs_GOterm_mapping.tsv -s 'Helianthus annuus' -o genes_orfs_GOterm_mapping.gaf

=head1 AUTHOR

S. Evan Staton, C<< <evan at evanstaton.com> >>

=head1 DESCRIPTION
                                                                   
 This command takes the sequence and GO term mappings generated by the 'hmmer2go mapterms'
 and creates an association file in GAF format.

=head1 REQUIRED ARGUMENTS

=over 2

=item -i, --infile

The sequence ID and GO term mapping file generated by the 'hmmer2go mapterms' command. The file
should be a two column tab-delimted file with the sequence ID in the first column and the GO terms
separated by commas in the second column.

=item -o, --outfile

The file GO Annotation Format (GAF) file to be created by this command. 

See:  https://geneontology.github.io/docs/go-annotation-file-gaf-format-2.1/

for the specifications on this format.

=item -s, --species

A species name must be given when creating the association. This should be the epithet in quotes. An example is provided
in the synopsis section of the document.

=back

=head1 OPTIONS

=over 2

=item -g, --gofile

The GO.terms_alt_ids file obtained from the Gene Ontology website. If not provided, the latest version will be downloaed and
used.

=item -h, --help

Print a usage statement. 

=item -m, --man

Print the full documentation.

=back 

=cut 

